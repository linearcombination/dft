# -*- mode: conf-unix; -*-

# NOTE The values in this file get interpreted by pydantic
# BaseSettings as JSON formatted data. This is why, for example,
# booleans use true and false rather than Python's True or False.

# NOTE Remember to quote strings that have characters that need to be
# otherwise escaped. For example:
# foo=This is ok without quotes
# bar="This wouldn't be ok without quotes"

LOGGING_CONFIG_FILE_PATH=backend/logging_config.yaml

# Location where the api finds translations.json
TRANSLATIONS_JSON_LOCATION=http://bibleineverylanguage.org/wp-content/themes/bb-theme-child/data/translations.json

# Container facing port for Uvicorn Python server.
API_LOCAL_PORT=5005

# Return the message to the API client to show to user on successful
# generation of PDF.
# SUCCESS_MESSAGE="Success! Please retrieve your generated document using a GET REST request to /pdf/{document_request_key}, /epub/{document_request_key}, or /docx/{document_request_key} (depending on whether you requested PDF, ePub, or Docx result) where document_request_key is the finished_document_request_key in this payload."

# Other email variables are set via Docker environment vars
EMAIL_SEND_SUBJECT=The BIEL PDF you requested is attached
TO_EMAIL_ADDRESS=fake@example.com

# Provided by system env vars (fake values provided so github action can run):
FROM_EMAIL_ADDRESS = "foo@example.com"
SMTP_HOST = "https://example.com"
SMTP_PORT = 111
SMTP_PASSWORD = "fakepass"
SEND_EMAIL = False

# The port to pass to gunicorn via ./backend/gunicorn.conf.py
PORT=5005
# Control caching of resource assets to save on network traffic
ASSET_CACHING_ENABLED=true
# Caching window of time in which cloned or downloaded resource asset
# files on disk are considered fresh rather than reacqiring them. In hours.
ASSET_CACHING_PERIOD=168

# Control whether GitPython package does git cloning or the git cli in
# a subpocess. git cli is more robust to errors and faster.
# USE_GIT_CLI=true

# * http://localhost:3000 covers requests originating from the case
# where 'npm run dev' is invoked to run vite (to run svelte js frontend)
# outside Docker. This results in vite's development mode which runs on
# port 3000.
# * http://localhost:8001 covers requests originating from the case
# where 'npm run build' is invoked which executes a vite build. Docker
# then copies built assets to nginx environment which then serves them
# on port 80 which is then mapped to port 8001 in docker-compose.yml.
# * http:localhost:4173 covers requests originating from the case where
# 'npm run preview' is invoked which executes serving the built for
# production (via 'npm build') frontend locally in a
# non-production-grade web server.
BACKEND_CORS_ORIGINS='["http://localhost:3000", "http://localhost:8001", "http://dev.local:3000", "http://dev.local:8001"]'

# local image tag for local dev with prod image
IMAGE_TAG=local
